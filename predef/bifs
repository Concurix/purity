## Tab or space separated list of MFAs and their hard-coded purity.
# Empty lines and those starting with # are ignored.
# `se' stands for Side-Effect
# `nd' stands for Non-Determinism
# `ex' stands for Exceptions
# While possible for `ex' to complement `nd', the current implementation
# will always consider 'ex' impure iff 'nd' is also impure.
# When it is not clear whether a value has side-effects, it will
# be simply marked with `false'.
binary,at,2		e
binary,bin_to_list,1	e
binary,bin_to_list,2	e
binary,bin_to_list,3	e
binary,compile_pattern,1	e
binary,copy,1
binary,copy,2
binary,decode_unsigned,1
binary,decode_unsigned,2
binary,encode_unsigned,1
binary,encode_unsigned,2
binary,first,1
binary,last,1
binary,list_to_bin,1
binary,longest_common_prefix,1
binary,longest_common_suffix,1
binary,match,2
binary,match,3
binary,matches,2
binary,matches,3
binary,part,2
binary,part,3
binary,referenced_byte_size,1

code,get_chunk,2	s
code,is_module_native,1	d
code,make_stub_module,3	s
code,module_md5,1	d

erlang,'-',1		e
erlang,'+',1		e
erlang,'<',2		p
erlang,'=<',2		p
erlang,'==',2		p
erlang,'=:=',2		p
erlang,'=/=',2		p
erlang,'>=',2		p
erlang,'>',2		p
erlang,'--',2		e
erlang,'-',2		e
erlang,'/=',2		p
erlang,'/',2		e
erlang,'!',2		s
erlang,'*',2		e
erlang,'+',2		e
erlang,'++',2		e
erlang,abs,1		e
erlang,adler32,1		e
erlang,adler32,2		e
erlang,adler32_combine,3	e
erlang,'and',2			e
erlang,append,2			e
erlang,append_element,2		e
## It's not possible to handle apply/3, since at compile time we cannot
## resolve the actual function it calls (unknown arity). In all other
## cases the compiler converts it to a direct call/3 primitive.
erlang,apply,3             >= e
erlang,atom_to_binary,2		e
erlang,atom_to_list,1		e
erlang,'band',2	    		e
erlang,binary_part,2		e
erlang,binary_part,3		e
erlang,binary_to_atom,2		e
erlang,binary_to_existing_atom,2	e
erlang,binary_to_list,1		e
erlang,binary_to_list,3		e
erlang,binary_to_term,1		e
erlang,binary_to_term,2		e
erlang,bit_size,1   		e
erlang,bitstring_to_list,1	e
erlang,blocking_read_file,1	d
erlang,'bnot',1			e
erlang,'bor',2			e
erlang,'bsl',2			e
erlang,'bsr',2			e
erlang,bump_reductions,1	s
erlang,'bxor',2			e
erlang,byte_size,1		e
# XXX unsure.
erlang,call_on_load_function,1	s
erlang,cancel_timer,1		s
erlang,check_process_code,2	d
erlang,crc32,1		e
erlang,crc32,2		e
erlang,crc32_combine,3	e
erlang,date,0		d
erlang,decode_packet,3	e
erlang,delete_module,1	s
erlang,demonitor,1	    s
erlang,demonitor,2	    s
erlang,display,1	    s
erlang,display_nl,0	    s
erlang,display_string,1	s
erlang,dist_exit,3      s
erlang,'div',2		e
erlang,element,2	e
erlang,erase,0		s
erlang,erase,1		s
# error and exit are special, they represent exceptions.
erlang,error,1		e
erlang,error,2		e
# nif_error is identical to error, its only use is to trick dialyzer.
erlang,nif_error,1	e
erlang,nif_error,2	e
erlang,exit,1		e
erlang,exit,2		s
erlang,external_size,1		p
# I think this is called after an attemp to load some new code
# and may remove that code if loading failed.
erlang,finish_after_on_load,2	s
erlang,float,1			e
erlang,float_to_list,1		e
# XXX: Not sure about these two. I guess since a module can be reloaded,
# their results can vary across calls.
erlang,function_exported,3	d
erlang,fun_info,2		d
erlang,fun_to_list,1		e
erlang,garbage_collect,0	s
erlang,garbage_collect,1	s
erlang,garbage_collect_message_area,0	s
erlang,get,0		d
erlang,get,1		d
erlang,get_keys,1	d
erlang,get_module_info,1	d
erlang,get_module_info,2	d
erlang,get_stacktrace,0		d
erlang,group_leader,0		d
erlang,group_leader,2		s
erlang,halt,0		s
erlang,halt,1		s
erlang,hash,2		e
erlang,hd,1		e
erlang,hibernate,3	s
erlang,integer_to_list,1	e
erlang,iolist_size,1		e
erlang,iolist_to_binary,1	e
erlang,is_alive,0		d
erlang,is_atom,1		p
erlang,is_binary,1		p
erlang,is_bitstring,1	        p
erlang,is_boolean,1		p
erlang,is_builtin,3		e
erlang,is_float,1		p
erlang,is_function,1	        p
erlang,is_function,2	        e
erlang,is_integer,1		p
erlang,is_list,1		p
erlang,is_number,1		p
erlang,is_pid,1			p
erlang,is_port,1		p
erlang,is_process_alive,1	d
erlang,is_record,2		p
erlang,is_record,3		p
erlang,is_reference,1		p
erlang,is_tuple,1		p
erlang,length,1			e
erlang,link,1			s
erlang,list_to_atom,1		e
erlang,list_to_binary,1		e
erlang,list_to_bitstring,1	e
erlang,list_to_existing_atom,1	e
erlang,list_to_float,1		e
erlang,list_to_integer,1	e
erlang,list_to_pid,1		e
erlang,list_to_tuple,1		e
erlang,loaded,0			d
erlang,load_module,2		s
erlang,load_nif,2		s
erlang,localtime,0		d
erlang,localtime_to_universaltime,2	d
erlang,make_fun,3	e
# The reason this is a side-effect is because the hidden VM
# state is altered with each call to make_ref/0.
erlang,make_ref,0	s
erlang,make_tuple,2	e
erlang,make_tuple,3	e
# No idea what this does. XXX unsure
erlang,match_spec_test,3	s
erlang,md5,1		e
erlang,md5_final,1	e
erlang,md5_init,0	e
erlang,md5_update,2	e
erlang,memory,0		d
erlang,memory,1		d
erlang,module_loaded,1	d
erlang,monitor,2	s
erlang,monitor_node,2	s
erlang,monitor_node,3	s
erlang,node,0		d
erlang,node,1		d
erlang,nodes,1		d
erlang,'not',1		e
erlang,now,0		d
erlang,open_port,2	s
erlang,'or',2		e
erlang,phash,2		e
erlang,phash2,1		e
erlang,phash2,2		e
erlang,pid_to_list,1	e
# Not sure how this port commands should be characterised.
erlang,port_call,2	s
erlang,port_call,3	s
erlang,port_close,1	s
erlang,port_command,2	s
erlang,port_command,3	s
erlang,port_connect,2	s
erlang,port_control,3	s
erlang,port_get_data,1	s
erlang,port_info,1	d
erlang,port_info,2	d
erlang,ports,0		d
erlang,port_set_data,2		s
erlang,port_to_list,1		e
erlang,pre_loaded,0		d
erlang,process_display,2	s
erlang,processes,0		d
erlang,process_flag,2		s
erlang,process_flag,3		s
erlang,process_info,1		d
erlang,process_info,2		d
erlang,purge_module,1		s
erlang,put,2		s
erlang,raise,3		e
erlang,read_timer,1	d
erlang,ref_to_list,1	e
erlang,register,2	s
erlang,registered,0	d
erlang,'rem',2		e
erlang,resume_process,1		s
erlang,round,1		e
erlang,self,0		d
erlang,send,2		s
erlang,send,3		s
erlang,send_after,3		s
erlang,seq_trace,2		s
# The fact that this is rt is merely an assumption...
erlang,seq_trace_info,1		d
# THe following two pass a message to the system_tracer
erlang,seq_trace_print,1	s
erlang,seq_trace_print,2	s
erlang,setelement,3		e
erlang,setnode,2		s
erlang,setnode,3		s
erlang,size,1			e
erlang,spawn,3			s
erlang,spawn_link,3		s
erlang,spawn_opt,1		s
erlang,split_binary,2		e
erlang,start_timer,3		s
# Statistics has side-effects since it may return
# the time passed from a previous call, hence it marks
# the time when its called. Or does time since last call
# stand for something else? XXX
erlang,statistics,1		s
erlang,subtract,2		e
erlang,suspend_process,2	s
erlang,system_flag,2		s
erlang,system_info,1		d
erlang,system_monitor,0		d
erlang,system_monitor,1		s
erlang,system_monitor,2		s
erlang,system_profile,0		d
erlang,system_profile,2		s
erlang,term_to_binary,1		e
erlang,term_to_binary,2		e
erlang,throw,1			e
erlang,time,0			d
erlang,tl,1			e
erlang,trace,3			s
erlang,trace_delivered,1	s
erlang,trace_info,2		d
erlang,trace_pattern,2		s
erlang,trace_pattern,3		s
erlang,trunc,1			e
erlang,tuple_size,1		e
erlang,tuple_to_list,1		e
erlang,universaltime,0			d
erlang,universaltime_to_localtime,1	d
erlang,unlink,1		s
erlang,unregister,1	s
erlang,whereis,1	d
erlang,'xor',2		e
erl_ddll,demonitor,1		s
# hmm, this is at least rt because of some peculiarities, but not sure in general. XXX unsure
erl_ddll,format_error_int,1	s
erl_ddll,info,2			d
erl_ddll,loaded_drivers,0	d
erl_ddll,monitor,2		s
erl_ddll,try_load,3		s
erl_ddll,try_unload,2		s
error_logger,warning_map,0	d
erts_debug,breakpoint,2		s
# XXX unsure
erts_debug,disassemble,1	s
erts_debug,display,1		s
# XXX unsure for the following 3
erts_debug,dist_ext_to_term,2	s
erts_debug,dump_links,1		s
erts_debug,dump_monitors,1	s
erts_debug,flat_size,1		p
## Not really sure about this.
erts_debug,get_internal_state,1	d
erts_debug,lock_counters,1	s
erts_debug,same,2		p
erts_debug,set_internal_state,2	s
# XXX Refine, not so sure about the rt values.
ets,all,0		d
ets,delete,1		s
ets,delete,2		s
ets,delete_all_objects,1	s
ets,delete_object,2	s
ets,first,1		d
ets,give_away,3		s
ets,info,1		d
ets,info,2		d
ets,insert,2		s
ets,insert_new,2	s
ets,is_compiled_ms,1	p
ets,last,1		d
ets,lookup,2		d
ets,lookup_element,3	d
ets,match,1		d
ets,match,2		d
ets,match,3		d
ets,match_object,1	d
ets,match_object,2	d
ets,match_object,3	d
ets,match_spec_compile,1	e
ets,match_spec_run_r,3		e
ets,member,2		d
ets,new,2		s
ets,next,2		d
ets,prev,2		d
ets,rename,2		s
ets,safe_fixtable,2	s
ets,select,1		d
ets,select,2		d
ets,select,3		d
ets,select_count,2	d
ets,select_delete,2	s
ets,select_reverse,1	d
ets,select_reverse,2	d
ets,select_reverse,3	d
ets,setopts,2		s
ets,slot,2		d
ets,update_counter,3	s
ets,update_element,3	s
## Lists
lists,keyfind,3		e
lists,keymember,3	e
lists,keysearch,3	e
lists,member,2		e
lists,reverse,2		e
## Math
math,acos,1		e
math,acosh,1		e
math,asin,1		e
math,asinh,1		e
math,atan,1		e
math,atan2,2		e
math,atanh,1		e
math,cos,1		e
math,cosh,1		e
math,erf,1		e
math,erfc,1		e
math,exp,1		e
math,log,1		e
math,log10,1		e
math,pow,2		e
math,sin,1		e
math,sinh,1		e
math,sqrt,1		e
math,tan,1		e
math,tanh,1		e

# I presume this returns whether a process has the unicode
# IO flag defined or not.
net_kernel,dflag_unicode_io,1	d

os,getenv,0		d
os,getenv,1		d
os,getpid,0		d
os,putenv,2		s
os,timestamp,0		d

re,compile,1		e
re,compile,2		e
re,run,2		e
re,run,3		e

string,to_float,1	p
string,to_integer,1	p

unicode,bin_is_7bit,1		p
unicode,characters_to_binary,2	e
unicode,characters_to_list,2	e
